prepare_msrc_data;
setup_msrc_lp;

num_train_per_graph  = 50;
num_response_samples = 5;
num_test_samples     = 1;
h                    = 0;
lookahead            = 1;
num_evaluations      = 10;
verbose              = true;

train_image_ind      = 1;
test_image_ind       = unique(graph_ind(graph_ind ~= train_image_ind));

train_ind = generate_balanced_graph_train_ind(graph_ind, num_train_per_graph);

response_sampling_function = @(data, reponses, train_ind) ...
    independent_response_sampler(data, responses, train_ind, ...
        probability_function, num_response_samples);

f = @(data, responses) ...
    wl_subtree_kernel(data, responses, graph_ind, train_image_ind, ...
                      test_image_ind, h, true);

utility_function = @(data, responses, train_ind) ...
    negative_mean_std_utility(data, responses, train_ind, ...
        response_sampling_function, f, ...
        num_response_samples);

% selection_functions{1} = @(data, resposes, train_ind) ...
%     one_graph_selection_function(graph_ind, train_image_ind);

selection_functions{1} = @(data, resposes, train_ind) ...
    setdiff(one_graph_selection_function(graph_ind, train_image_ind), ...
            train_ind);

[chosen_ind, utilities] = optimal_learning(data, responses, train_ind, ...
        utility_function, probability_function, selection_functions, ...
        lookahead, num_evaluations, verbose);