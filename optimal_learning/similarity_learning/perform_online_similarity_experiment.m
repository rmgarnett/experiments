required_options = ...
    {'A', ...
     'node_labels', ...
     'graph_ind', ...
     'train_graph_ind', ...
     'f', ...
     'num_samples', ...
     'probability_function', ...
     'lookahead', ...
     'num_evaluations', ...
     'verbose', ...
     'sigma_multiplier', ...
     'train_ind', ...
     'k' ...
    };

check_required_options;

if (options_defined)

  test_graph_ind = setdiff(graph_ind, train_graph_ind);

  response_sampling_function = @(A, node_labels, train_ind, num_samples) ...
      independent_response_sampler(A, node_labels, train_ind, ...
          probability_function, num_samples);

  utility_function = @(A, node_labels, train_ind) ...
      sum_top_lcb_utility(A, node_labels, train_ind, ...
                          response_sampling_function, f, num_samples, ...
                          sigma_multiplier, k);

  selection_functions{1} = @(A, responpeses, train_ind) ...
      graph_subset_selection_function(train_ind, graph_ind, train_graph_ind);

  lcbs = @(means, variances) means - sigma_multiplier * sqrt(variances);
  
  true_similarities = f(A, node_labels);
  performance = @(ind) (sum(true_similarities(ind(2:(k + 1)))));
  
  [~, true_ind] = sort(true_similarities, 'descend');
  best_performance = performance(true_ind);
  fprintf('best possible performance: %0.3f\n', best_performance);
  
  [means, variances] = calculate_moments(A, node_labels, train_ind, ...
          response_sampling_function, f, num_samples);
  
  [~, ind] = sort(lcbs(means, variances), 'descend');
  starting_performance = performance(ind);
  fprintf('performance with no training data: %0.3f\n', starting_performance);

  random_train_ind      = train_ind;
  uncertainty_train_ind = train_ind;
  wdd_train_ind         = train_ind;
  optimal_train_ind     = train_ind;

  random_performances      = zeros(num_evaluations, 1);
  uncertainty_performances = zeros(num_evaluations, 1);
  wdd_performances         = zeros(num_evaluations, 1);
  optimal_performances     = zeros(num_evaluations, 1);

  for i = 1:num_evaluations
    fprintf('performing random sampling: ');
    random_chosen_ind = random_sampling(A, node_labels, random_train_ind, ...
            utility_function, selection_functions, 1, verbose);
    random_train_ind = [random_train_ind; random_chosen_ind];
  
    [means, variances] = calculate_moments(A, node_labels, ...
            random_train_ind, response_sampling_function, f, num_samples);
  
    [~, ind] = sort(lcbs(means, variances), 'descend');
    random_performance = performance(ind);
    random_performances(i) = random_performance;
    
    fprintf('performing uncertainty sampling: ');
    uncertainty_chosen_ind = uncertainty_sampling(A, node_labels, ...
            uncertainty_train_ind, probability_function, ...
            selection_functions{1}, 1, verbose);
    uncertainty_train_ind = [uncertainty_train_ind; uncertainty_chosen_ind];
  
    [means, variances] = calculate_moments(A, node_labels, ...
            uncertainty_train_ind, response_sampling_function, f, num_samples);
  
    [~, ind] = sort(lcbs(means, variances), 'descend');
    uncertainty_performance = performance(ind);
    uncertainty_performances(i) = uncertainty_performance;

    fprintf('performing wdd sampling: ');
    wdd_chosen_ind = wdd_sampling(A, node_labels, ...
            wdd_train_ind, probability_function, ...
            selection_functions{1}, 1, verbose);
    wdd_train_ind = [wdd_train_ind; wdd_chosen_ind];
  
    [means, variances] = calculate_moments(A, node_labels, ...
            wdd_train_ind, response_sampling_function, f, num_samples);
  
    [~, ind] = sort(lcbs(means, variances), 'descend');
    wdd_performance = performance(ind);
    wdd_performances(i) = wdd_performance;

    fprintf('performing optimal sampling: ');
    optimal_chosen_ind = optimal_learning(A, node_labels, ...
            optimal_train_ind, utility_function, probability_function, ...
            selection_functions, lookahead, 1, verbose);
    optimal_train_ind = [optimal_train_ind; optimal_chosen_ind];
  
    [means, variances] = calculate_moments(A, node_labels, ...
            optimal_train_ind, response_sampling_function, f, num_samples);
  
    [~, ind] = sort(lcbs(means, variances), 'descend');
    optimal_performance = performance(ind);
    optimal_performances(i) = optimal_performance;

    fprintf('after %i steps: random: %0.3f, uncertainty: %0.3f, wdd: %0.3f, optimal: %0.3f\n', ...
            i, ...
            random_performance, ...
            uncertainty_performance, ...
            wdd_performance, ...
            optimal_performance);
  end
end
